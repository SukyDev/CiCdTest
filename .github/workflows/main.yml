name: iOS Tests

on:
  # Triggers on PR to main or develop
  pull_request:
    branches: [ main, develop ]
  # Allows manual trigger
  workflow_dispatch:

jobs:
  test:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'  # Adjust if necessary

      - name: Select Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.3'

      - name: Show build SDK
        run: xcodebuild -showsdks

      - name: Show available destinations
        run: xcodebuild -list -project CiCdTesting.xcodeproj

      - name: Install CocoaPods
        run: |
          pod install

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles


      # Install Fastlane
      - name: Install Fastlane
        run: |
          gem install fastlane

      # Archive the app
      - name: Build and archive the app
        run: |
          xcodebuild -workspace CiCdTesting.xcworkspace \
            -scheme CiCdTesting \
            -archivePath $PWD/build/CiCdTesting.xcarchive \
            clean archive

      # Export the .ipa file
      - name: Export .ipa file
        run: |
          xcodebuild -exportArchive \
            -archivePath $PWD/build/CiCdTesting.xcarchive \
            -exportOptionsPlist exportOptions.plist \
            -exportPath $PWD/build

      # Add fastlane username and password
      - name: Set Fastlane credentials
        run: |
          # Set the session token if using 2FA
          if [ -n "${{ secrets.FASTLANE_SESSION }}" ]; then
            export FASTLANE_SESSION="${{ secrets.FASTLANE_SESSION }}"
            echo "Using Fastlane session token for authentication"
          else
            # Otherwise, use username and password
            export FASTLANE_USER="${{ secrets.FASTLANE_USER }}"
            export FASTLANE_PASSWORD="${{ secrets.FASTLANE_PASSWORD }}"
            echo "Using Fastlane username and password for authentication"
          fi

      # Install bundler
      - name: Install Bundler and dependencies
        run: |
          gem install bundler
          bundle install

      # Upload to TestFlight
      - name: Upload to TestFlight
        run: |
          bundle exec fastlane deliver --ipa $PWD/build/CiCdTesting.ipa \
            --skip_screenshots \
            --skip_metadata \
            --skip_binary_upload \
            --username "${{ secrets.FASTLANE_USER }}" \
            --api_key "${{ secrets.API_KEY_BASE64 }}" # Use API key

      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
